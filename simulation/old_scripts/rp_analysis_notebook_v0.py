# rp_analysis_notebook.py – analysis + visualisation notebook (script style)
"""
Re‑create Figures 7 and 8 of Pradeep et al. (2025) from the Monte‑Carlo
output generated by *batch_rp_sweep.py*, and extend the study to multiple
observing frequencies + additional physics diagnostics.

Usage (interactive):
    %run rp_analysis_notebook.py

All plots are saved into the `figs/` directory and also shown inline when
run in a Jupyter environment.
"""

from __future__ import annotations

import glob
import pathlib
import re
from dataclasses import dataclass
from typing import List, Dict, Tuple

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# -----------------------------------------------------------------------------
# 0.  Configuration – where batch outputs live, colour map, etc.
# -----------------------------------------------------------------------------
DATA_DIR = pathlib.Path("csv")   # directory containing summary_RP=*.csv
FIG_DIR  = pathlib.Path("figs")
FIG_DIR.mkdir(exist_ok=True)

COLOR_RP = {
    0.20: "tab:blue",
    0.96: "tab:orange",
    9.50: "tab:green",
}

# Matplotlib style for paper‑quality figs
plt.rcParams.update({
    "font.size": 11,
    "figure.figsize": (4.7, 3.2),
    "figure.dpi": 150,
    "axes.grid": True,
})

# -----------------------------------------------------------------------------
# 1.  Helper – load CSVs into a single DataFrame with RP tagged
# -----------------------------------------------------------------------------

def load_rp_results(pattern: str = "summary_RP=*.csv") -> pd.DataFrame:
    frames: List[pd.DataFrame] = []
    for fn in DATA_DIR.glob(pattern):
        m = re.search(r"RP=([\d\.]+)", fn.stem)
        if not m:
            continue
        rp_val = float(m.group(1))
        df = pd.read_csv(fn)
        df["RP"] = rp_val
        frames.append(df)
    if not frames:
        raise FileNotFoundError("No matching CSV files found in 'csv/'")
    return pd.concat(frames, ignore_index=True)

# -----------------------------------------------------------------------------
# 2.  Plot Fig. 7 analogue – total modulation index vs RP
# -----------------------------------------------------------------------------

def fig7_modulation(df: pd.DataFrame):
    """Scatter + expectation lines for m^2 = 1,2,3."""
    fig, ax = plt.subplots()
    for rp, grp in df.groupby("RP"):
        ax.scatter([rp]*len(grp), grp["m2"], alpha=0.4, color=COLOR_RP.get(rp, "grey"))

    # Expected horizontal lines
    ax.hlines([1, 2, 3], xmin=0.1, xmax=12, colors="k", linestyles=["--", ":", "-."])
    ax.set_xscale("log")
    ax.set_xlim(0.1, 12)
    ax.set_xlabel("Resolution power RP")
    ax.set_ylabel(r"$m^2$ (modulation index squared)")
    ax.set_title("Fig. 7 replica: modulation vs RP")
    fig.tight_layout()
    fig.savefig(FIG_DIR / "fig7_modulation_vs_RP.png")
    plt.show()

# -----------------------------------------------------------------------------
# 3.  Plot Fig. 8 analogue – recovered scintillation bandwidth vs RP
# -----------------------------------------------------------------------------

def fig8_bandwidth(df: pd.DataFrame):
    """Plot MW and host ν_s vs RP on log‑log axes."""
    fig, ax = plt.subplots()
    for rp, grp in df.groupby("RP"):
        # Each row has two fitted ν_s columns: "nu_s_mw", "nu_s_host"
        ax.scatter([rp]*len(grp), grp["nu_s_mw"], marker="o", color=COLOR_RP.get(rp, "blue"), label=f"MW RP={rp}" if rp==0.2 else None, alpha=0.4)
        ax.scatter([rp]*len(grp), grp["nu_s_host"], marker="x", color=COLOR_RP.get(rp, "orange"), label=f"Host RP={rp}" if rp==0.2 else None, alpha=0.4)

    ax.set_xscale("log"); ax.set_yscale("log")
    ax.set_xlim(0.1, 12)
    ax.set_xlabel("Resolution power RP")
    ax.set_ylabel(r"Scintillation bandwidth $\nu_s$ [Hz]")
    ax.set_title("Fig. 8 replica: ν_s vs RP")
    ax.legend(loc="lower left", frameon=False)
    fig.tight_layout()
    fig.savefig(FIG_DIR / "fig8_bandwidth_vs_RP.png")
    plt.show()

# -----------------------------------------------------------------------------
# 4.  Multi‑frequency sweep & physics diagnostics
# -----------------------------------------------------------------------------
@dataclass
class SweepConfig:
    wavelengths_m: List[float]
    RP_values: List[float]
    n_real: int = 30


def run_multifreq_sweep(cfg: SweepConfig) -> pd.DataFrame:
    """Run batch_rp_sweep for multiple λ and RP values, return combined DF."""
    from batch_rp_sweep import run_regime

    all_frames = []
    for lam in cfg.wavelengths_m:
        for rp in cfg.RP_values:
            df = run_regime(RP=rp, n_real=cfg.n_real, wavelength_m=lam)
            df["lambda_m"] = lam
            all_frames.append(df)
    return pd.concat(all_frames, ignore_index=True)


def plot_multifreq_bandwidth(df: pd.DataFrame):
    """Plot ν_s vs λ for MW and host to check Kolmogorov λ^(-4.4) scaling."""
    fig, ax = plt.subplots()
    for rp, grp in df.groupby("RP"):
        for which in ("mw", "host"):
            nu_col = f"nu_s_{which}"
            label = f"{which.upper()} RP={rp}"
            ax.scatter(grp["lambda_m"], grp[nu_col], label=label, alpha=0.5,
                       marker="o" if which=="mw" else "x")
    ax.set_xscale("log"); ax.set_yscale("log")
    ax.set_xlabel(r"Wavelength $\lambda$ [m]")
    ax.set_ylabel(r"$\nu_s$ [Hz]")
    ax.set_title("Scintillation bandwidth vs wavelength")
    ax.legend(frameon=False, fontsize=8)
    fig.tight_layout()
    fig.savefig(FIG_DIR / "multifreq_bandwidth.png")
    plt.show()

# -----------------------------------------------------------------------------
# 5.  Main driver when run as script
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    df_all = load_rp_results()

    print("Loaded", len(df_all), "rows from", df_all["RP"].nunique(), "RP bins")

    fig7_modulation(df_all)
    fig8_bandwidth(df_all)

    # Optional: extended sweep ----------------------------------------------
    cfg = SweepConfig(
        wavelengths_m=[0.35, 0.21, 0.10, 0.05],  # 850, 1.4, 3, 6 GHz bands
        RP_values=[0.2, 0.96, 9.5],
        n_real=15,
    )
    df_mult = run_multifreq_sweep(cfg)
    df_mult.to_csv(DATA_DIR / "multifreq_sweep.csv", index=False)
    plot_multifreq_bandwidth(df_mult)

    print("Analysis finished – figures in", FIG_DIR)
